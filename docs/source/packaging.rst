Packaging
=========

Packaging your code is the process of organizing your project files
so that it can be built and installed by other users. As well as
your source code, there are a few files that are needed so that
your project "pip-installable", i.e. can be installed with
`pip <https://pypi.org/project/pip>`_ and uploaded to
`PyPI <http://pypi.org/>`_.

While the `Python Packaging Authority (PyPA) <https://packaging.python.org/>`_
provides a comprehensive `guide <https://packaging.python.org/en/latest/tutorials/packaging-projects/>`_
on packaging Python projects, this project instead uses `Poetry <https://python-poetry.org/>`_.
Poetry is one of many tools that can be used to manage Python packages and environments.
It simplifies/automates a lot of small aspects than if we were to use
approach described by PyPA.

`uv <https://github.com/astral-sh/uv>`_ is another popular tool for Python packaging,
written in Rust.


Poetry setup
------------

As a first-time setup, Poetry needs to be installed. The process is described on
`this page <https://python-poetry.org/docs/#installation>`_. I recommend using the
``pipx`` method:

1. Install ``pipx``: https://pipx.pypa.io/stable/installation/
2. Install Poetry: ``pipx install poetry``


Project structure
-----------------

A typical (minimal) file structure for a Python project to be 
"pip-installable" looks like so:

.. code::

    project/
    |-- __init__.py
    |-- code.py
    |-- # other files
    README.rst     # or .md, .txt, etc
    pyproject.toml   # or setup.cfg or setup.py

where:

* The folder ``project`` contains your source code files and
  an ``__init__.py``, which could be empty.
* ``README.rst`` which is not necessary for building the Python, but 
  is often the first file that new users will look into to learn
  about the project, how to install it, and how to use it. On GitHub
  and PyPI, it will be rendered as the "homepage" for your project. 
* ``pyproject.toml`` is a configuration file for building the project.
  More on that :ref:`below <pyproject.toml>`. In the past, Python projects
  used ``setup.py`` for this purpose, but ``pyproject.toml`` is becoming
  more and more the norm. As this project used to use ``setup.py``,
  more on that can be found :ref:`below <setup.py (old way)>`.


Project Management and Packaging with Poetry
---------------------------------------------

`This page <https://python-poetry.org/docs/basic-usage/>`_ provides an
overview of how to use Poetry:

* For a `new project <https://python-poetry.org/docs/basic-usage/#project-setup>`_,
  you can run ``poetry new poetry-demo``. This will create a new folder with
  the project structure described above, including an empty ``tests`` folder.
* For an `existing project <https://python-poetry.org/docs/basic-usage/#initialising-a-pre-existing-project>`_,
  you can run ``poetry init``. Through the command line, you will be asked
  a series of questions to fill in the ``pyproject.toml`` file.

The project can then be built (locally) with the command below:

.. code:: bash

    (project_env) poetry install

The project can be imported in your Python script as:

.. code:: Python

    import project

.. note::
    One useful feature of Poetry is that with a **single command** you can
    install new dependencies and update the ``pyproject.toml`` file.
    For example, to install ``pandas`` and add to ``pyproject.toml``,
    you can run:

    .. code:: bash

        (project_env) poetry add pandas

    You can also create groups of dependencies, e.g. for development
    dependencies, by running:

    .. code:: bash

        (project_env) poetry add --group dev sphinx

    So that during installation, you can specify which group of 
    dependencies:

    .. code:: bash

        (project_env) poetry install --with dev

    More on managing dependencies can be found `here <https://python-poetry.org/docs/managing-dependencies/>`_.


pyproject.toml
--------------

Using a ``pyproject.toml`` file is not unique to Poetry, but is becoming
more and more the norm for Python projects. Below is the ``pyproject.toml``
file for this project.

.. literalinclude:: ../../pyproject.toml
    :caption: pyproject.toml
    :linenos:

Everything except the sections labeled with "manually added" was
automatically generated by Poetry.

More info on configuring the ``pyproject.toml`` file can be found at the links below:

* General configuration (`short <https://packaging.python.org/en/latest/tutorials/packaging-projects/#configuring-metadata>`_
  and `in-depth <https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#writing-pyproject-toml>`_ guides). 
* Poetry configuration: https://python-poetry.org/docs/pyproject/


Publishing to PyPI with Poetry
------------------------------

Poetry also makes building and deploying to PyPI easy.
`This article <https://www.digitalocean.com/community/tutorials/how-to-publish-python-packages-to-pypi-using-poetry-on-ubuntu-22-04>`_
sums up the process well:

1. (First-time) setup:

   * Create an account on PyPI: https://pypi.org/account/register/
   * Create a token: https://pypi.org/manage/account/
   * Add the token to Poetry: ``poetry config pypi-token.pypi <your-token>``
2. Update the version number in the ``pyproject.toml`` file. See `Semantic Versioning <https://semver.org/>`__ for recommendations on picking version numbers.
3. Build the package: ``poetry build``
4. Upload to PyPI: ``poetry publish``. Check https://pypi.org/project/pydevtips/ ðŸŽ‰

If there are issues in publishing to PyPI, you can check the logs with:

.. code:: bash

    poetry publish --dry-run

Or if there are issues with rendering the README file, you can check the logs with (``twine`` is required):

.. code:: bash

    twine check dist/pydevtips-X.X.X.tar.gz   # replace X.X.X with version number


Creating a new release on GitHub
--------------------------------

For a new release, you should create a new tag on GitHub. This can be done with the command below:

.. code:: bash

    git tag -a X.X.X -m "version X.X.X"
    git push origin X.X.X

If you project is hosted on GitHub, you can create a new release by:

#. Clicking (the rightmost) "..." dropdown menu (from the `tags page <https://github.com/ebezzam/python-dev-tips/tags>`_).
#. Selecting "Create release". 
#. At the bottom pressing "Publish release".


setup.py (old way)
------------------

The use of ``setup.py`` is an older way to Python projects, e.g, with ``setuptools``.
Below is a previously-used ``setup.py`` file for this project.

.. literalinclude:: ../../OLD_setup.py
    :caption: setup.py
    :linenos:

* Lines 3-4: use the contents of ``README.rst`` to be rendered for the homepage
  on PyPI. *Be sure to set the correct file extension and set Line 13
  accordingly*.
* Line 7: specifies the name of the package / in which folder the source code
  is located, such that the package can be installed with ``pip install pydevtips``
  if on PyPI and imported as ``import pydevtips``.
* Line 8: sets the package version, *which should be (typically) modified before
  uploading a new version to PyPI (below)*.
* Line 9-10: for your name and contact info.
* Line 20-26: specifies the Python version and package dependencies.

The project can then be built (locally) with the command below:

.. code:: bash

    (project_env) pip install -e .

The project can be imported in your Python script as:

.. code:: Python

    import project

For a more in-depth description, check out `this article <https://towardsdatascience.com/setuptools-python-571e7d5500f2>`_.

Uploading your project to PyPI is traditionally done with the `twine <https://pypi.org/project/twine/>`__
library.

.. code:: bash

    # inside virtual environment
    (project_env) pip install twine

In the steps below, replace "X.X.X" with the appropriate version number, *matching the one
in your* ``setup.py`` *file*. See `Semantic Versioning <https://semver.org/>`__ for
recommendations on picking version numbers.

.. code:: bash

    # edit version in `setup.py`
    # build package
    (project_env) python setup.py sdist bdist_wheel
    # -- creates zip in dist folder

    # upload to pypi
    (project_env) python -m twine upload  dist/pydevtips-X.X.X.tar.gz
    # -- X.X.X is the version number in setup.py
    # -- enter username and password
    # -- check https://pypi.org/project/pydevtips/X.X.X/

    # new tag on GitHub
    git tag -a X.X.X -m "version X.X.X"
    git push origin X.X.X

If you project is hosted on GitHub, you can create a new release by:

#. Clicking (the rightmost) "..." dropdown menu (from the `tags page <https://github.com/ebezzam/python-dev-tips/tags>`_).
#. Selecting "Create release". 
#. At the bottom pressing "Publish release".
